{"ast":null,"code":"const handleUpload = async () => {\n  const formData = new FormData();\n  formData.append('file', selectedFile);\n  try {\n    const response = await fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    setPrediction(data.prediction); // Update state with the prediction\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Failed to fetch prediction. Please try again.');\n  }\n};","map":{"version":3,"names":["handleUpload","formData","FormData","append","selectedFile","response","fetch","method","body","ok","Error","status","data","json","setPrediction","prediction","error","console","alert"],"sources":["D:/Digit_Recognition_Env/mnist-digit-recognition/src/App.js"],"sourcesContent":["const handleUpload = async () => {\n  const formData = new FormData();\n  formData.append('file', selectedFile);\n\n  try {\n      const response = await fetch('http://localhost:5000/upload', {\n          method: 'POST',\n          body: formData,\n      });\n\n      if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setPrediction(data.prediction); // Update state with the prediction\n  } catch (error) {\n      console.error('Error:', error);\n      alert('Failed to fetch prediction. Please try again.');\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEC,YAAY,CAAC;EAErC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MACzDC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEP;IACV,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC7D;IAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClCC,aAAa,CAACF,IAAI,CAACG,UAAU,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9BE,KAAK,CAAC,+CAA+C,CAAC;EAC1D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}