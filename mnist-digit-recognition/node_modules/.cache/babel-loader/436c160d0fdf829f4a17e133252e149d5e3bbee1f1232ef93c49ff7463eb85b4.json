{"ast":null,"code":"var _jsxFileName = \"D:\\\\Digit_Recognition_Env\\\\mnist-digit-recognition\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [prediction, setPrediction] = useState('');\n  const [error, setError] = useState('');\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n    setError(''); // Reset error message when a new file is selected\n  };\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select a file to upload.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Upload failed');\n      }\n      const data = await response.json();\n      setPrediction(data.prediction); // Update state with the prediction\n      setError(''); // Clear any previous errors\n    } catch (error) {\n      setError(error.message); // Set error message in state\n      setPrediction(''); // Clear previous prediction on error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload an Image for Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/png\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Predicted Digit: \", prediction]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 22\n    }, this), error && /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"P9hhbb1MkK4f1Wtj0ImrCtuyqAQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","prediction","setPrediction","error","setError","handleFileChange","event","target","files","handleUpload","formData","FormData","append","response","fetch","method","body","ok","errorData","json","Error","data","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","style","color","_c","$RefreshReg$"],"sources":["D:/Digit_Recognition_Env/mnist-digit-recognition/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [prediction, setPrediction] = useState('');\n  const [error, setError] = useState('');\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n    setError(''); // Reset error message when a new file is selected\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select a file to upload.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Upload failed');\n      }\n\n      const data = await response.json();\n      setPrediction(data.prediction); // Update state with the prediction\n      setError(''); // Clear any previous errors\n\n    } catch (error) {\n      setError(error.message); // Set error message in state\n      setPrediction(''); // Clear previous prediction on error\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Upload an Image for Prediction</h1>\n      <input type=\"file\" accept=\"image/png\" onChange={handleFileChange} />\n      <button onClick={handleUpload}>Upload</button>\n      {prediction && <h2>Predicted Digit: {prediction}</h2>}\n      {error && <h2 style={{ color: 'red' }}>{error}</h2>} {/* Display error if any */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}